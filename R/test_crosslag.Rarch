# # Some useful keyboard shortcuts for package authoring:
# #
# #   Build and Reload Package:  'Ctrl + Shift + B'
# #   Check Package:             'Ctrl + Shift + E'
# #   Test Package:              'Ctrl + Shift + T'
#
library(OpenMx)
library('parallel')
mxOption(NULL, 'Number of Threads', 6)
library(mlth.data.frame)

data <- read.csv('data/Maria_2018-07-31_Random1_All (1).csv')

data$zygos <- factor(data$zygos,
                     levels = 1:2,
                     labels = c('MZ', 'DZ'))

zyg <- 'zygos'
definition <- list(Time1 = c('cCL','cINF','cCF'), Time2 = c('dCL','dINF','dCF'))

#vars <- unlist(definition)
#nv <- length(vars)
#selvars <- paste0(vars, rep(1:2, each = length(vars)))

# Starting values
#longdata <-reshape(data[,selvars],
#                   varying = selvars,
#                   v.names = vars,
#                   direction = 'long')
#phmodel <- cross_lag(longdata, definition)
#phmodel <- mxRun(phmodel)

#phmodel<-def_ci(phmodel, 'Parameter_table[ ,2]')
#phmodel <- mxRun(phmodel, intervals=TRUE)
#get_output_tables(phmodel)

twinmodel <- cross_lag_ace(data,
                           zyg = 'zygos',
                           definition = definition)
twinmodel <- mxRun(twinmodel)

crosslag_output <- get_output_tables(twinmodel)

refModels <- twin_ref_models(twinmodel, run = TRUE)

ref_models(twinmodel) <- refModels

fit_stats(twinmodel)

write.mlth(fit_stats(twinmodel),
           'data/Maria_crosslag.xls',
           sheetName = 'Fit_statistics',
           append = FALSE)
for (i in names(crosslag_output))
  write.mlth(crosslag_output[[i]],
             'data/Maria_crosslag.xls',
             sheetName = i,
             append = TRUE)

# Error here:
# Error in `row.names<-.mlth.data.frame`(`*tmp*`, value = c("cCL --> dCL",  :
#The length of row.names must be nrow(x) or 0


# data(twinData)
#
# twinData$zyg2 <- sapply(twinData$zyg, switch, 'MZ', 'MZ', 'DZ', 'DZ', 'DZ',
#                         'MZ', 'MZ', 'DZ', 'DZ', 'DZ')
# twinData$zyg2 <- factor(twinData$zyg2, levels = c('MZ', 'DZ'))
#
# twinData$zyg3 <- sapply(twinData$zyg, switch, 'MZ', 'MZ', 'DZss', 'DZss', 'DZos',
#                         'MZ', 'MZ', 'DZss', 'DZss', 'DZos')
# twinData$zyg3 <- factor(twinData$zyg3, levels = c('MZ', 'DZss', 'DZos'))
#
# #get_univ_descriptives(twinData, 'zygosity', c('wt', 'ht', 'htwt', 'bmi'))
# #get_univ_descriptives(twinData, 'zyg2', c('wt', 'ht', 'htwt', 'bmi'))
# #get_univ_descriptives(twinData, 'zyg3', c('wt', 'ht', 'htwt', 'bmi'))
#
# #get_cross_trait_cors(twinData, 'zygosity', c('wt', 'ht', 'htwt', 'bmi'))
# #get_cross_trait_cors(twinData, 'zyg2', c('wt', 'ht', 'htwt', 'bmi'), compact = TRUE)
#
# #get_fisher_z(twinData, 'zyg3', c('wt', 'ht', 'htwt', 'bmi'), compare = c('DZss','DZos'))
#
# vars <- 'bmi'
# selvars <- paste0(vars, 1:2)
# mzdata <- twinData[twinData$zyg2 == 'MZ', selvars]
# dzdata <- twinData[twinData$zyg2 == 'DZ', selvars]
#
# univariate_ade <- mxModel(name = 'ADE',
#                           mxMatrix(type = 'Lower', nrow = 1, ncol = 1,
#                                    free = TRUE, values = 0.5, name = 'a'),
#                           mxMatrix(type = 'Lower', nrow = 1, ncol = 1,
#                                    free = TRUE, values = 0.5, name = 'd'),
#                           mxMatrix(type = 'Lower', nrow = 1, ncol = 1,
#                                    free = TRUE, values = 0.5, name = 'e'),
#
#                           mxAlgebra(t(a) %*% a, name = 'A'),
#                           mxAlgebra(t(d) %*% d, name = 'D'),
#                           mxAlgebra(t(e) %*% e, name = 'E'),
#                           mxAlgebra(A + D + E, name = 'V'),
#
#                           mxAlgebra(rbind(cbind(V, A + D),
#                                           cbind(A + D, V)),
#                                     name = 'expCovMZ'),
#                           mxAlgebra(rbind(cbind(V, 0.5 %x% A + 0.25 %x% D),
#                                           cbind(0.5 %x% A + 0.25 %x% D, V)),
#                                     name = 'expCovDZ'),
#
#                           mxMatrix(type = 'Full', nrow = 1, ncol = 1,
#                                    free = TRUE, values = 20, name = 'mean'),
#                           mxAlgebra(cbind(mean, mean),
#                                     name = 'expMeans'),
#
#                           mxModel(name = 'MZ',
#                                   mxData(observed = mzdata, type = 'raw'),
#                                   mxExpectationNormal(covariance = 'ADE.expCovMZ',
#                                                       means = 'ADE.expMeans',
#                                                       dimnames = selvars),
#                                   mxFitFunctionML()),
#                           mxModel(name = 'DZ',
#                                   mxData(observed = dzdata, type = 'raw'),
#                                   mxExpectationNormal(covariance = 'ADE.expCovDZ',
#                                                       means = 'ADE.expMeans',
#                                                       dimnames = selvars),
#                                   mxFitFunctionML()),
#
#                           mxFitFunctionMultigroup(c('MZ','DZ')),
#
#                           # Output matrices
#                           mxAlgebra(cbind(A / V, D / V, E / V),
#                                     dimnames = list(vars, c('A', 'D', 'E')),
#                                     name = 'Variance_components')
#                           )
#
# output_tables(univariate_ade) <- 'Variance_components'
#
# univariate_ade <- mxRun(univariate_ade)
#
# get_output_tables(univariate_ade)
#
# #univariate_ade <- run_ref_models(univariate_ade)
#
# uade_nested <- def_nested_models(univariate_ade,
#                                  AE = mxMatrix(type = 'Lower', nrow = 1, ncol = 1,
#                                                free = FALSE, values = 0, name = 'd'),
#                                  DE = mxMatrix(type = 'Lower', nrow = 1, ncol = 1,
#                                                free = FALSE, values = 0, name = 'a'),
# #                                 E = list(mxMatrix(type = 'Lower', nrow = 1, ncol = 1,
# #                                                   free = FALSE, values = 0, name = 'd'),
# #                                          mxMatrix(type = 'Lower', nrow = 1, ncol = 1,
# #                                                   free = FALSE, values = 0, name = 'a')),
#                                  run = TRUE)
#
# #ref_models(univariate_ade) <- twin_ref_models(univariate_ade, run = TRUE)
# #fit_stats(univariate_ade, uade_nested)
#
# #lapply(uade_nested, get_output_tables)
#
# univariate_ade <- def_ci(univariate_ade, c('Variance_components', 'mean'))
# univariate_ade <- mxRun(univariate_ade, intervals = TRUE)
#
# # test get_output_tables with and without CIs
# library(OpenMx)
# library('parallel')
# mxOption(NULL, 'Number of Threads', 6)
# library(mlth.data.frame)
#
